# Alternative Dockerfile with maximum reliability for Railway
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat git
WORKDIR /app

# Copy package files
COPY package.json package-lock.json* ./

# Multi-strategy dependency installation with fallbacks
RUN set -ex; \
    # Strategy 1: Try npm install with cache clearing
    npm cache clean --force || true; \
    npm config set registry https://registry.npmjs.org/ || true; \
    npm config set strict-ssl false || true; \
    npm config set fetch-retries 5 || true; \
    npm config set fetch-retry-mintimeout 20000 || true; \
    npm config set fetch-retry-maxtimeout 120000 || true; \
    # Try npm install first
    npm install --production --no-audit --no-fund --prefer-offline --cache /tmp/.npm --verbose || \
    # Strategy 2: Clear everything and retry
    (rm -rf node_modules package-lock.json && npm install --production --no-audit --no-fund --verbose) || \
    # Strategy 3: Use yarn as fallback
    (npm install -g yarn && yarn install --production --frozen-lockfile --network-timeout 100000) || \
    # Strategy 4: Last resort - force install
    npm install --production --no-audit --no-fund --force --verbose; \
    # Clean up
    npm cache clean --force || true

# Rebuild the source code only when needed
FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Build the application with error handling
RUN set -ex; \
    npm run build || \
    (echo "Build failed, trying with clean install..." && \
     rm -rf node_modules && \
     npm install && \
     npm run build)

# Production image, copy all the files and run the app
FROM nginx:alpine AS runner
WORKDIR /usr/share/nginx/html

# Remove default nginx static assets
RUN rm -rf ./*

# Copy static assets from builder stage
COPY --from=builder /app/dist .

# Copy nginx configuration
COPY nginx.conf /etc/nginx/nginx.conf

# Expose port 80
EXPOSE 80

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
